/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import adt.*;
import entity.*;
import java.awt.*;
import javax.swing.*;

/**
 *
 * @author User
 */
public class SnakeGameplay extends javax.swing.JFrame {

    private static final Object[] GAME_LEVEL = {"Easy", "Normal", "Hard"};
    
    /**
     * Creates new form SnakeGameplay
     */
    public SnakeGameplay() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        snakeGameplayLabel = new javax.swing.JLabel();
        playGameButton = new javax.swing.JButton();
        leaderboardButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Main Menu");

        snakeGameplayLabel.setFont(new java.awt.Font(".Heiti J", 1, 24)); // NOI18N
        snakeGameplayLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        snakeGameplayLabel.setText("Snake Game");

        playGameButton.setFont(new java.awt.Font(".Heiti J", 1, 18)); // NOI18N
        playGameButton.setText("Play Game");
        playGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playGameButtonActionPerformed(evt);
            }
        });

        leaderboardButton.setFont(new java.awt.Font(".Heiti J", 1, 18)); // NOI18N
        leaderboardButton.setText("Leaderboard");
        leaderboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaderboardButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(snakeGameplayLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(leaderboardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(playGameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(122, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(snakeGameplayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(playGameButton)
                .addGap(18, 18, 18)
                .addComponent(leaderboardButton)
                .addGap(0, 76, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void playGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playGameButtonActionPerformed
        // TODO add your handling code here:

        JPanel gameLevelPanel = new JPanel();
        gameLevelPanel.add(new JLabel("Please Choose the Game's Level: "));
        
        int gameLevelResult = JOptionPane.showOptionDialog(null, gameLevelPanel, "Game Level",
                JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,
                null, GAME_LEVEL, null);
        
        //Only able play game after player choose game level
        if(gameLevelResult == 0 || gameLevelResult == 1 || gameLevelResult == 2){
            this.dispose();

            int width = 925;
            int height = 720;

            JFrame jframeSnake = new JFrame();

            jframeSnake.setTitle("Snake Game");
            jframeSnake.setBounds(10, 10, width, height);
            jframeSnake.setResizable(false);
            jframeSnake.setVisible(true);
            jframeSnake.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            jframeSnake.setLocationRelativeTo(null);
            jframeSnake.getContentPane().setBackground(Color.DARK_GRAY);

            Snake gameplay = new Snake(width, height, gameLevelResult + 1);

            jframeSnake.add(gameplay);
        }

    }//GEN-LAST:event_playGameButtonActionPerformed

    private void leaderboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaderboardButtonActionPerformed
        // TODO add your handling code here:
        /*SortedListInterface<Player> playerSortedList1 = new SortedArrayList<>();
        playerSortedList1.add(new Player(1001, "easy1", new GameLevel(1), 25));
        playerSortedList1.add(new Player(1002, "easy2", new GameLevel(1), 10));
        playerSortedList1.add(new Player(1003, "easy3", new GameLevel(1), 28));
        playerSortedList1.add(new Player(1004, "easy4", new GameLevel(1), 6));
        playerSortedList1.add(new Player(1005, "easy5", new GameLevel(1), 2));
        
        SortedListInterface<Player> playerSortedList2 = new SortedArrayList<>();
        playerSortedList2.add(new Player(1001, "normal1", new GameLevel(2), 20));
        playerSortedList2.add(new Player(1002, "normal2", new GameLevel(2), 7));
        playerSortedList2.add(new Player(1003, "normal3", new GameLevel(2), 8));
        playerSortedList2.add(new Player(1004, "normal4", new GameLevel(2), 15));
        playerSortedList2.add(new Player(1005, "normal5", new GameLevel(2), 3));
        
        SortedListInterface<Player> playerSortedList3 = new SortedArrayList<>();
        playerSortedList3.add(new Player(1001, "hard1", new GameLevel(3), 34));
        playerSortedList3.add(new Player(1002, "hard2", new GameLevel(3), 10));
        playerSortedList3.add(new Player(1003, "hard3", new GameLevel(3), 21));
        playerSortedList3.add(new Player(1004, "hard4", new GameLevel(3), 25));
        playerSortedList3.add(new Player(1005, "hard5", new GameLevel(3), 7));
        
        ListInterface<Leaderboard> leaderBoardList = new ArrayList<>();
        leaderBoardList.add(new Leaderboard("Easy", playerSortedList1));
        leaderBoardList.add(new Leaderboard("Normal", playerSortedList2));
        leaderBoardList.add(new Leaderboard("Hard", playerSortedList3));
        
        Leaderboard leaderboard = new Leaderboard();
        leaderboard.saveLeaderboardDataToFile(leaderBoardList);*/
        
        Leaderboard leaderboard = new Leaderboard();
        ListInterface<Leaderboard> leaderBoardList = leaderboard.readLeaderboardDataFromFile();
        /*System.out.println(leaderBoardList.getEntry(1));
        System.out.println(leaderBoardList.getEntry(2));
        System.out.println(leaderBoardList.getEntry(3));*/

        JPanel leaderboardLevelPanel = new JPanel();
        leaderboardLevelPanel.add(new JLabel("Please Choose the Game's Level: "));
        
        int leaderboardResult = JOptionPane.showOptionDialog(null, leaderboardLevelPanel, "Game Level",
                JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,
                null, GAME_LEVEL, null);
        
        leaderboardResult += 1;//to let the result start from 1 - 3
        
        JPanel leaderboardPanel = new JPanel();
        leaderboardPanel.setLayout(new BorderLayout(20, 20));
        
        //Title
        JLabel leaderboardTitleLabel = new JLabel(this.getLevelTitle(leaderboardResult));
        leaderboardTitleLabel.setFont(new java.awt.Font(".Heiti J", 1, 24));
        leaderboardTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        
        leaderboardPanel.add(leaderboardTitleLabel, BorderLayout.NORTH);

        
        //Variable Name
        JTextField varibaleTextField = new JTextField();
        String variable = String.format("%8s", "ID") +  String.format("%10s", "Name") + String.format("%11s", "Level") + String.format("%12s", "Score");
        varibaleTextField.setText(variable);
        varibaleTextField.setFont(new java.awt.Font(".Heiti J", 1, 16));
        varibaleTextField.setOpaque(false);
        varibaleTextField.setBackground(new Color(0, 0, 0, 0));
        varibaleTextField.setEditable(false);
        varibaleTextField.setBorder(null);

        leaderboardPanel.add(varibaleTextField, BorderLayout.CENTER);
        
        //SortedList Player (TextArea)
        JTextArea leaderboardTextArea = new JTextArea();
        leaderboardTextArea.setOpaque(false);
        leaderboardTextArea.setBackground(new Color(0, 0, 0, 0));
        leaderboardTextArea.setEditable(false);

        String str = "";
        
        //the sortedList is start from 1
        for(int i = 1; i <= leaderBoardList.getEntry(leaderboardResult).getPlayerSortedList().getLength(); i++){
            str += String.format("%02d", i) + ". " + leaderBoardList.getEntry(leaderboardResult).getPlayerSortedList().getEntry(i) + "\n";

        }

        leaderboardTextArea.setText(str);
        leaderboardTextArea.setFont(new java.awt.Font(".Heiti J", 0, 14));
        
        //Add leaderboardTextArea to scrollPane
        JScrollPane scrollPane = new JScrollPane(leaderboardTextArea);  
        scrollPane.setPreferredSize( new Dimension( 400, 100 ) );
        scrollPane.setBorder(null);
        
        leaderboardPanel.add(scrollPane, BorderLayout.SOUTH);
        JOptionPane.showMessageDialog(null, leaderboardPanel, "Leaderboard - Easy",  
                                       JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_leaderboardButtonActionPerformed

    public static String getLevelTitle(int leaderboardLevelPanel){
        if(leaderboardLevelPanel == 1){
            return "Leaderboard - Easy";
        }else if(leaderboardLevelPanel == 2){
            return "Leaderboard - Normal";
        }else{
            return "Leaderboard - Hard";
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SnakeGameplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SnakeGameplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SnakeGameplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SnakeGameplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SnakeGameplay().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton leaderboardButton;
    private javax.swing.JButton playGameButton;
    private javax.swing.JLabel snakeGameplayLabel;
    // End of variables declaration//GEN-END:variables
}
