/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import adt.*;
import entity.*;
import java.awt.*;
import javax.swing.*;

/**
 * 
 * @author lky1020
 */

public class SnakeGameplay extends javax.swing.JFrame {

    private static final Object[] GAME_LEVEL = {"Easy", "Normal", "Hard"};
    private Leaderboard leaderboard = new Leaderboard();
    private ListInterface<Leaderboard> leaderBoardList;

    /**
     * Creates new form SnakeGameplay
     */
    public SnakeGameplay() {
        initComponents();

        //read data from file
        leaderBoardList = leaderboard.readLeaderboardDataFromFile();
    }

    public SnakeGameplay(Player player) {
        initComponents();

        //read data from file
        leaderBoardList = leaderboard.readLeaderboardDataFromFile();

        //refresh current game status of play if player score new high score
        player.getCurrentGameStatus();
        
        //player level still null (set the current level to the first game history of player)
        if(player.getCurrentLevel() == null){
            player.setCurrentLevel(player.getGameHistory().getEntry(1).getLevel());
        }
        
        int level = 0;
        int location = 0;
        //search the player info (start from 1)
        for (int i = 1; i <= leaderBoardList.getLength(); i++) {

            //check the sortedList player for the player (start from 1)
            for (int j = 1; j <= leaderBoardList.getEntry(i).getPlayerSortedList().getLength(); j++) {

                if (leaderBoardList.getEntry(i).getPlayerSortedList().getEntry(j).getId() == player.getId()) {
                    level = i;
                    location = j;
                }
            }
        }

        //remove existing player record
        if (level != 0 && location != 0) {
            Player oldPlayerRecord = leaderBoardList.getEntry(level).getPlayerSortedList().getEntry(location);

            //remove existing player record
            leaderBoardList.getEntry(level).getPlayerSortedList().remove(oldPlayerRecord);
        }

        //add the new player record to leaderboard(easy, normal, hard)
        for (int i = 1; i <= leaderBoardList.getLength(); i++) {
            if (leaderBoardList.getEntry(i).getRankType().compareTo(player.getCurrentLevel().getLevelType()) == 0) {
                leaderBoardList.getEntry(i).getPlayerSortedList().add(player);
            }
        }

        //save the reord to file
        leaderboard.saveLeaderboardDataToFile(leaderBoardList);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        snakeGameplayLabel = new javax.swing.JLabel();
        playGameButton = new javax.swing.JButton();
        leaderboardButton = new javax.swing.JButton();
        historyButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Main Menu");

        snakeGameplayLabel.setFont(new java.awt.Font(".Heiti J", 1, 24)); // NOI18N
        snakeGameplayLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        snakeGameplayLabel.setText("Snake Game");

        playGameButton.setFont(new java.awt.Font(".Heiti J", 1, 18)); // NOI18N
        playGameButton.setText("Play Game");
        playGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playGameButtonActionPerformed(evt);
            }
        });

        leaderboardButton.setFont(new java.awt.Font(".Heiti J", 1, 18)); // NOI18N
        leaderboardButton.setText("Leaderboard");
        leaderboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaderboardButtonActionPerformed(evt);
            }
        });

        historyButton.setFont(new java.awt.Font(".Heiti J", 1, 18)); // NOI18N
        historyButton.setText("History");
        historyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(snakeGameplayLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(playGameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(historyButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(leaderboardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(120, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(snakeGameplayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(playGameButton)
                .addGap(18, 18, 18)
                .addComponent(historyButton)
                .addGap(18, 18, 18)
                .addComponent(leaderboardButton)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void playGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playGameButtonActionPerformed
        // TODO add your handling code here:
        JPanel gameLevelPanel = new JPanel();
        gameLevelPanel.setLayout(new BorderLayout(20, 20));
        gameLevelPanel.add(new JLabel("Please Enter Player Name (Max 7 Character): "), BorderLayout.CENTER);

        //Player Name
        JTextField playerNameTextField = new JTextField(10);
        gameLevelPanel.add(playerNameTextField, BorderLayout.EAST);

        //Game Level
        gameLevelPanel.add(new JLabel("Please Choose Game Level: "), BorderLayout.SOUTH);

        int gameLevelResult = JOptionPane.showOptionDialog(null, gameLevelPanel, "Game Level",
                JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,
                null, GAME_LEVEL, null);

        //check player name
        if (playerNameTextField.getText().equals("") || playerNameTextField.getText().length() > 7) {

            JOptionPane.showMessageDialog(null, "Please Enter Valid Player Name!!!", "Invalid Player Name", JOptionPane.ERROR_MESSAGE);

        } else {

            int level = 0;
            int location = 0;
            int startId = 1001; //to get the start id for the tempID

            //search the player info to prevent create duplicate player (start from 1)
            for (int i = 1; i <= leaderBoardList.getLength(); i++) {

                //check the sortedList player for the player (start from 1)
                for (int j = 1; j <= leaderBoardList.getEntry(i).getPlayerSortedList().getLength(); j++) {

                    startId++;

                    if (leaderBoardList.getEntry(i).getPlayerSortedList().getEntry(j).getName().equals(playerNameTextField.getText())) {
                        level = i;
                        location = j;
                    }
                }
            }

            //Player that will pass to the Snake.java
            Player player = null;
            player.setIdTemp(startId);
            //create new player record if no exist in leaderboard
            if (level == 0 && location == 0) {

                player = new Player(playerNameTextField.getText());

            } else {

                player = leaderBoardList.getEntry(level).getPlayerSortedList().getEntry(location);

            }

            //Only able play game after player choose game level
            if (gameLevelResult == 0 || gameLevelResult == 1 || gameLevelResult == 2) {
                this.dispose();

                int width = 925;
                int height = 720;

                JFrame jframeSnake = new JFrame();

                jframeSnake.setTitle("Snake Game");
                jframeSnake.setBounds(10, 10, width, height);
                jframeSnake.setResizable(false);
                jframeSnake.setVisible(true);
                jframeSnake.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                jframeSnake.setLocationRelativeTo(null);
                jframeSnake.getContentPane().setBackground(Color.DARK_GRAY);

                Snake gameplay = new Snake(width, height, gameLevelResult + 1, player);

                jframeSnake.add(gameplay);
            }
        }

    }//GEN-LAST:event_playGameButtonActionPerformed

    private void leaderboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaderboardButtonActionPerformed
        // TODO add your handling code here:   
        //Display Leaderboard
        JPanel leaderboardLevelPanel = new JPanel();
        leaderboardLevelPanel.add(new JLabel("Please Choose the Game's Level: "));

        int leaderboardResult = -1;

        leaderboardResult = JOptionPane.showOptionDialog(null, leaderboardLevelPanel, "Game Level",
                JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,
                null, GAME_LEVEL, null);

        leaderboardResult += 1;//to let the result start from 1 - 3

        if (leaderboardResult == 1 || leaderboardResult == 2 || leaderboardResult == 3) {
            JPanel leaderboardPanel = new JPanel();
            leaderboardPanel.setLayout(new BorderLayout(20, 20));

            //Title
            JLabel leaderboardTitleLabel = new JLabel(this.getLevelTitle(leaderboardResult));
            leaderboardTitleLabel.setFont(new java.awt.Font(".Heiti J", 1, 24));
            leaderboardTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

            leaderboardPanel.add(leaderboardTitleLabel, BorderLayout.NORTH);

            //Variable Name
            JTextField varibaleTextField = new JTextField();
            String variable = String.format("%8s", "ID") + String.format("%10s", "Name") + String.format("%11s", "Level") + String.format("%12s", "Score");
            varibaleTextField.setText(variable);
            varibaleTextField.setFont(new java.awt.Font(".Heiti J", 1, 16));
            varibaleTextField.setOpaque(false);
            varibaleTextField.setBackground(new Color(0, 0, 0, 0));
            varibaleTextField.setEditable(false);
            varibaleTextField.setBorder(null);

            leaderboardPanel.add(varibaleTextField, BorderLayout.CENTER);

            //SortedList Player (TextArea)
            JTextArea leaderboardTextArea = new JTextArea();
            leaderboardTextArea.setOpaque(false);
            leaderboardTextArea.setBackground(new Color(0, 0, 0, 0));
            leaderboardTextArea.setEditable(false);

            String str = "";

            //the sortedList is start from 1
            for (int i = 1; i <= leaderBoardList.getEntry(leaderboardResult).getPlayerSortedList().getLength(); i++) {
                str += String.format("%02d", i) + ". " + leaderBoardList.getEntry(leaderboardResult).getPlayerSortedList().getEntry(i) + "\n";

            }

            leaderboardTextArea.setText(str);
            leaderboardTextArea.setFont(new java.awt.Font(".Heiti J", 0, 14));

            //Add leaderboardTextArea to scrollPane
            JScrollPane scrollPane = new JScrollPane(leaderboardTextArea);
            scrollPane.setPreferredSize(new Dimension(400, 100));
            scrollPane.setBorder(null);

            leaderboardPanel.add(scrollPane, BorderLayout.SOUTH);
            JOptionPane.showMessageDialog(null, leaderboardPanel, this.getLevelTitle(leaderboardResult),
                    JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_leaderboardButtonActionPerformed

    private void historyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButtonActionPerformed
        // TODO add your handling code here:
        //Display panel to get the playerID and display its history
        JPanel historyPanel = new JPanel();
        historyPanel.add(new JLabel("Please Enter Player's Name: "));

        JTextField playerNameTextField = new JTextField(10);
        historyPanel.add(playerNameTextField);

        int historyResult = JOptionPane.showOptionDialog(null, historyPanel, "Player's History",
                JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);

        //Yes
        if (historyResult == 0 && playerNameTextField.getText().length() != 0 && playerNameTextField.getText().length() <= 7) {

            String playerName = playerNameTextField.getText();

            int level = 0;
            int location = 0;

            //search the player info (start from 1)
            for (int i = 1; i <= leaderBoardList.getLength(); i++) {

                //check the sortedList player for the player (start from 1)
                for (int j = 1; j <= leaderBoardList.getEntry(i).getPlayerSortedList().getLength(); j++) {

                    if (leaderBoardList.getEntry(i).getPlayerSortedList().getEntry(j).getName().compareTo(playerName) == 0) {
                        level = i;
                        location = j;
                    }
                }
            }

            //Exist Player
            if (level != 0 && location != 0) {
                //get the game history of the player
                ListInterfaceWithIterator<GameHistory> gameHistory = leaderBoardList.getEntry(level).getPlayerSortedList().getEntry(location).getGameHistory();

                //Display Game History
                JPanel gameHistoryPanel = new JPanel();
                gameHistoryPanel.setLayout(new BorderLayout(20, 20));

                //Title
                JLabel gameHistoryLabel = new JLabel("Game History");
                gameHistoryLabel.setFont(new java.awt.Font(".Heiti J", 1, 24));
                gameHistoryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

                gameHistoryPanel.add(gameHistoryLabel, BorderLayout.NORTH);

                //Variable Name
                JTextField varibaleTextField = new JTextField();
                String variable = " " + String.format("%-13s", "ID") + String.format("%-20s", "Name") + String.format("%-18s", "Date") + String.format("%-11s", "Level") + String.format("%-12s", "Score");
                varibaleTextField.setText(variable);
                varibaleTextField.setFont(new java.awt.Font(".Heiti J", 1, 16));
                varibaleTextField.setOpaque(false);
                varibaleTextField.setBackground(new Color(0, 0, 0, 0));
                varibaleTextField.setEditable(false);
                varibaleTextField.setBorder(null);

                gameHistoryPanel.add(varibaleTextField, BorderLayout.CENTER);

                //List Game History (TextArea)
                JTextArea gameHistoryTextArea = new JTextArea();
                gameHistoryTextArea.setOpaque(false);
                gameHistoryTextArea.setBackground(new Color(0, 0, 0, 0));
                gameHistoryTextArea.setEditable(false);

                String str = leaderBoardList.getEntry(level).getPlayerSortedList().getEntry(location).getId() + 
                        "\t" + leaderBoardList.getEntry(level).getPlayerSortedList().getEntry(location).getName();

                //the list is start from 1
                for (int i = 1; i <= gameHistory.getLength(); i++) {

                    if (i == 1) {
                        str += "\t" + gameHistory.getEntry(i) + "\n";
                    } else {
                        str += "\t\t" + gameHistory.getEntry(i) + "\n";
                    }
                }

                gameHistoryTextArea.setText(str);
                gameHistoryTextArea.setFont(new java.awt.Font(".Heiti J", 0, 14));

                //Add leaderboardTextArea to scrollPane
                JScrollPane scrollPane = new JScrollPane(gameHistoryTextArea);
                scrollPane.setPreferredSize(new Dimension(550, 150));
                scrollPane.setBorder(null);

                gameHistoryPanel.add(scrollPane, BorderLayout.SOUTH);
                JOptionPane.showMessageDialog(null, gameHistoryPanel, "Player",
                        JOptionPane.INFORMATION_MESSAGE);

            } else {
                JOptionPane.showMessageDialog(null, "Player Not Exist!!!", "Information", JOptionPane.INFORMATION_MESSAGE);
            }

        } else if (historyResult == 0 && playerNameTextField.getText().length() == 0 || playerNameTextField.getText().length() > 7) {

            JOptionPane.showMessageDialog(null, "Please Enter Valid Player Name (Within 7 Characters)!!!", "Invalid Player ID", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_historyButtonActionPerformed

    public static String getLevelTitle(int leaderboardLevelPanel) {
        switch (leaderboardLevelPanel) {
            case 1:
                return "Leaderboard - Easy";
            case 2:
                return "Leaderboard - Normal";
            default:
                return "Leaderboard - Hard";
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SnakeGameplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SnakeGameplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SnakeGameplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SnakeGameplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SnakeGameplay().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton historyButton;
    private javax.swing.JButton leaderboardButton;
    private javax.swing.JButton playGameButton;
    private javax.swing.JLabel snakeGameplayLabel;
    // End of variables declaration//GEN-END:variables
}
