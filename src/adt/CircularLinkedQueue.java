package adt;/** * LinkedQueue.java A class that implements the ADT queue by using a chain of * nodes that has both head and tail references. NOTE: This version does not * include the setNextNode, getNextNode, setData and getData methods in the Node * class */public class CircularLinkedQueue<T> implements QueueInterface<T> {  private Node lastNode;        public CircularLinkedQueue(){        clear();    }        @Override    public void enqueue(T newEntry) {        Node newNode = new Node(newEntry, null);                if(isEmpty()){            lastNode = newNode;            lastNode.setNext(lastNode);        }else{            Node temp = lastNode.getNext();            lastNode.setNext(newNode);            lastNode = newNode;            lastNode.setNext(temp);        }            }    @Override    public T dequeue() {                T data = null;                if(!isEmpty()){                        data = lastNode.getNext().getData();                        if(lastNode == lastNode.getNext()){                lastNode = null;            }            else{                lastNode.setNext(lastNode.getNext().getNext());            }                    }        return data;    }    @Override    public T getFront() {                T data = null;                if(!isEmpty()){                        data = lastNode.getNext().getData();        }                return data;    }    @Override    public boolean isEmpty() {        return lastNode == null;    }    @Override    public void clear() {        this.lastNode = null;    }   private class Node {    private T data;     private Node next;     private Node(T data) {      this.data = data;      this.next = null;    }     private Node(T data, Node next) {      this.data = data;      this.next = next;    }     public T getData() {        return data;    }    public void setData(T data) {        this.data = data;    }    public Node getNext() {        return next;    }    public void setNext(Node next) {        this.next = next;    }  } } 